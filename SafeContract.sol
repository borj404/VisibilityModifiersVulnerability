// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SafeContract {
    mapping(address => uint256) private balances;

    event BalanceChanged(address indexed user, uint256 newBalance);
    event Withdrawal(address indexed user, uint256 amount);

    function deposit() public payable {
        require(msg.value > 0, "Must deposit more than zero");
        balances[msg.sender] += msg.value;
        emit BalanceChanged(msg.sender, balances[msg.sender]);
    }

    // Making this function public allows anyone to update any balance
    function updateBalance(address user, uint256 newBalance) public {
        balances[user] = newBalance;
        emit BalanceChanged(user, newBalance);
    }

    function getBalance(address user) public view returns (uint256) {
        return balances[user];
    }

    function transfer(address to, uint256 amount) public {
        require(to != address(0), "Cannot transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        uint256 senderBalance = balances[msg.sender];
        require(senderBalance >= amount, "Insufficient balance");

        balances[msg.sender] = senderBalance - amount;
        balances[to] += amount;

        emit BalanceChanged(msg.sender, balances[msg.sender]);
        emit BalanceChanged(to, balances[to]);
    }

    function withdraw(uint256 amount) public {
        uint256 userBalance = balances[msg.sender];
        
        require(userBalance >= amount, "Insufficient user balance");
        require(address(this).balance >= amount, "Insufficient contract balance");
        
        balances[msg.sender] = userBalance - amount;
        
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Failed to return Ether");

        emit Withdrawal(msg.sender, amount);
    }
}